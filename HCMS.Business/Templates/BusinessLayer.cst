<%@ CodeTemplate Language="C#" TargetLanguage="VB.Net" Description="Generates a class including a special informational header" %> 
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the stored procedures should be based on." %>
<%@ Property Name="IsTableLookup" Type="System.Boolean" Default="False" Category="Context" Description="Is the table that is specified in the source a lookup table?" %>
<%@ Property Name="IsPartialClass" Type="System.Boolean" Default="False" Category="Context" Description="Is this class a partial class?" %>
<%@ Property Name="NameSpace" Type="String" Category="Context" Description="The namespace to use for this class" %>
<%@ Property Name="ClassName" Type="String" Category="Context" Description="The name of the class to generate" %>
<%@ Property Name="StoredProcedurePrefix" Default="spr_" Type="String" Category="Context" Description="The prefix to be used by all stored procedure names." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Collections.Generic" %>
<% 
	string sprocName = string.Empty;
	string partialValue = IsPartialClass ? "partial " : string.Empty;
%>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Xml.Serialization;
using System.IO;

using HCMS.Business.Base;

namespace <%=NameSpace %>
{
	/// <summary>
	/// <%= ClassName %> Business Object
	/// </summary>
	[Serializable]
	public <%= partialValue %>class <%=ClassName %> : BusinessBase
	{
	#region Private Members
	
		<% 
		string typeName;
		
		for (int i = 0; i < SourceTable.Columns.Count; i++) { 
			typeName = GetAppropriateParameter (SourceTable.Columns[i], true, true);
		%>
		private <%=  typeName %> _<%= cleanMemberPrivate(SourceTable.Columns[i].Name) %> <%= GetAppropriateParameter (SourceTable.Columns[i], true, false) %>;
		<% } %>		
			
		#endregion
	
	#region Properties
	
	<% for (int i = 0; i < SourceTable.Columns.Count; i++) { 
		typeName = GetAppropriateParameter (SourceTable.Columns[i], true, true);
	%>
	public <%= typeName %> <%= cleanMemberProperty(SourceTable.Columns[i].Name) %>
	{
		get
		{
			return this._<%= cleanMemberPrivate(SourceTable.Columns[i].Name) %>;
		}
		set
		{
			this._<%= cleanMemberPrivate(SourceTable.Columns[i].Name) %> = value;
		}
	}
	
	<% } %>		
		#endregion
	
	#region Constructors
	
	<% 
	if (!IsTableLookup)
	{
	%>
	public <%= ClassName %> ()
	{
		// Empty Constructor
	}
		
	public <%= ClassName %> (int loadByID)
	{
		// Load Object by ID
		DataTable returnTable;
		
		<% sprocName = StoredProcedurePrefix + "Get" + MakeSingle(ReplacePrefixes(SourceTable.Name)) + "ByID"; %>
		try
        {
            returnTable = ExecuteDataTable("<%= sprocName %>", loadByID);
			loadData(returnTable);
		}
        catch (Exception ex)
        {
            HandleException(ex);
         }
	}	
	
	<%
	}
	%>	
	public <%= ClassName %> (DataRow singleRowData)
	{
		// Load Object by dataRow
		try
        {
            this.FillObjectFromRowData (singleRowData);
		}
        catch (Exception ex)
        {
            HandleException(ex);
         }
	}	
	
	#endregion
	
	#region Constructor Helper Methods
	
	<% 
	if (!IsTableLookup)
	{
	%>
	private void loadData (DataTable returnTable)
	{
		if (returnTable.Rows.Count > 0) 
		{
			DataRow returnRow = returnTable.Rows[0];
			
			this.FillObjectFromRowData(returnRow);
		}
	}
	
	<%
	}
	%>
	protected virtual void FillObjectFromRowData (DataRow returnRow)
	{		
				<% for (int i = 0; i < SourceTable.Columns.Count; i++) { 
					ColumnSchema column = SourceTable.Columns[i];
					string paramType = GetAppropriateParameter (column, false, true);
					string columnName = cleanMemberPrivate(column.Name);
					string fieldName = column.Name;
					
					if (!column.AllowDBNull) 
					{
				%>
				<% if (paramType == "string") {%>
					this._<%= columnName %> = returnRow["<%= fieldName %>"].ToString();
				<%} else { %>
					this._<%= columnName %> = (<%= paramType %>) returnRow["<%= fieldName %>"];
				<% } %>
				<% } else { %>
				
				if (returnRow["<%= fieldName %>"] != DBNull.Value)
				<% if (paramType == "string") {%>
					this._<%= columnName %> = returnRow["<%= fieldName %>"].ToString();
				<%} else { %>
					this._<%= columnName %> = (<%= paramType %>) returnRow["<%= fieldName %>"];
				
				<% } %>
				<% } // check column.AllowDBNull %>
				<% } %>
	}
	
	#endregion
	
	#region ToXML Method
	
        ///<summary>
        /// Returns an XML String that represents the current object.
        ///</summary>
        public string ToXML()
        {
            XmlSerializer serializer = new XmlSerializer(this.GetType());
            using (StreamReader sr = new StreamReader(new MemoryStream()))
            {
                serializer.Serialize(sr.BaseStream, this);
                sr.BaseStream.Position = 0;
                return sr.ReadToEnd();
            }
        }
        
	#endregion ToXML Method
	
	#region ToString Method

        ///<summary>
        /// Returns a String that represents the current object.
        ///</summary>
        public override string ToString()
        {
			<% string retStr = string.Empty;			
				for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++)
				{
				ColumnSchema column = SourceTable.PrimaryKey.MemberColumns[i];
				string memPropName = cleanMemberProperty(column.Name);
				string memType = GetAppropriateParameter(column, true, true);
				string memStr = string.Concat("\"", memPropName, ":\" + ", GetMembString(memType, memPropName));
				retStr = (i == 0) ? memStr : string.Concat(retStr, " + ",  memStr);				
			}%>
            return <%= retStr %>;
        }

    #endregion ToString Method

	#region CompareMethods
	
        /// <summary>
        /// Determines whether the specified System.Object is equal to the current object.
        /// </summary>
        /// <param name="obj">The System.Object to compare with the current object.</param>
        /// <returns>Returns true if the specified System.Object is equal to the current object; otherwise, false.</returns>
        public override bool Equals(Object obj)
        {	
           <%= ClassName %> <%= ClassName %>obj = obj as <%= ClassName %> ;
			
            return (<%= ClassName %>obj == null) ? false : (<%= GetPrimCompString(ClassName) %> );
        }

        /// <summary>
        /// Serves as a hash function for a particular type. GetHashCode() is suitable
        /// for use in hashing algorithms and data structures like a hash table.
        /// </summary>
        /// <returns>A hash code for the current object.</returns>
        public override int GetHashCode()
        {
            <% string retHcStr = string.Empty;			
			if(SourceTable.PrimaryKey.MemberColumns.Count > 0)
			{
				for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++)
				{
				ColumnSchema column = SourceTable.PrimaryKey.MemberColumns[i];
				string memPropName = cleanMemberProperty(column.Name);
				string memStr = memPropName + ".GetHashCode()";
				retHcStr = (i == 0) ? memStr: string.Concat (retHcStr , "^ ", memStr);
				}
			}%>
			return <%= retHcStr %>;
        }
	#endregion
	
	<%
	if (!IsTableLookup)
	{
	%>
	#region General Methods
	
	public void Add()
	{
	<%
		sprocName = StoredProcedurePrefix + "Add" + MakeSingle(ReplacePrefixes(SourceTable.Name));
		string primaryKeyName = SourceTable.PrimaryKey.MemberColumns[0].Name;
	%>
		DbCommand commandWrapper = GetDbCommand("<%= sprocName %>");
		
        try
        {
			SqlParameter returnParam = new SqlParameter("<%= string.Format("@new{0}", primaryKeyName) %>", SqlDbType.Int);
			returnParam.Direction = ParameterDirection.Output;

			// get the new <%= primaryKeyName %> of the record
			commandWrapper.Parameters.Add(returnParam);
			
            <% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
					<% WriteSqlParameters(SourceTable.NonPrimaryKeyColumns[i], "sqlParams", i + 1); %>					
			<% } %>

            ExecuteNonQuery(commandWrapper);
           
			this._<%= cleanMemberPrivate(primaryKeyName) %>  = (int) returnParam.Value;
          }
        catch (Exception ex)
        {
            HandleException(ex);
         }
	}
	
	public void Update()
	{
	<%
		sprocName = StoredProcedurePrefix + "Update" + MakeSingle(ReplacePrefixes(SourceTable.Name));
	%>
		if (base.ValidateKeyField(this._<%= cleanMemberPrivate(SourceTable.PrimaryKey.MemberColumns[0].Name) %>))
		{
			DbCommand commandWrapper = GetDbCommand("<%= sprocName %>");
			
			try
			{
				<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
					<% WriteSqlParameters(SourceTable.Columns[i], "sqlParams", i); %>						
				<% } %>

				ExecuteNonQuery(commandWrapper);
			}
			catch (Exception ex)
			{
				HandleException(ex);
			}
		}
	}		
	
	public void Delete()
	{
	<% sprocName = StoredProcedurePrefix + "Delete" + MakeSingle(ReplacePrefixes(SourceTable.Name)); %>
		if (base.ValidateKeyField(this._<%= cleanMemberPrivate(SourceTable.PrimaryKey.MemberColumns[0].Name) %>))
		{
			try
			{
				ExecuteNonQuery("<%= sprocName %>", this._<%= cleanMemberPrivate(SourceTable.PrimaryKey.MemberColumns[0].Name) %>);
			}
			catch (Exception ex)
			{
				HandleException(ex);
			}
		}
	}
		
	#endregion
	
	<%
	}
	%>	
	#region Collection Helper Methods
	
	internal static List<<%= ClassName %>> GetCollection (DataTable dataItems)
	{
		List<<%= ClassName %>> listCollection = new List<<%= ClassName %>>();
		<%= ClassName %> current = null;
		
		if (dataItems != null)
		{
			for (int i = 0; i < dataItems.Rows.Count; i++)
			{
				current = new <%= ClassName %> (dataItems.Rows[i]);
				listCollection.Add(current);
			}
		}
		else
			throw new Exception("You cannot create a <%= ClassName %> collection from a null data table.");

		return listCollection;
	}
		
	#endregion
	
	<%
	if (!IsTableLookup)
	{
	%>	
	#region Collection Methods
		
		<% 
		string collectionPropertyName = string.Empty;
		string collectionClassName = string.Empty;
		
		for (int i = 0; i < SourceTable.PrimaryKeys.Count; i++) 
		{ 
			TableKeySchema thisKeyTable = (TableKeySchema) SourceTable.PrimaryKeys[i];
			TableSchema thisTable = (TableSchema) thisKeyTable.ForeignKeyTable;
			collectionPropertyName = ReplacePrefixes(thisTable.Name) ;
			collectionClassName = MakeSingle(collectionPropertyName);
			sprocName = string.Format("{0}Get{1}By{2}", StoredProcedurePrefix, collectionPropertyName, SourceTable.PrimaryKey.MemberColumns[0].Name);
		
		%>			
			public List<<%= collectionClassName %>> Get<%= collectionPropertyName %>By<%= thisTable.PrimaryKey.MemberColumns[0].Name %>()
			{
				List <<%= MakeSingle(collectionPropertyName) %>> childDataCollection = null;
				if (base.ValidateKeyField(this._<%= cleanMemberPrivate(SourceTable.PrimaryKey.MemberColumns[0].Name) %>))
				{
					try
					{
						DataTable dt = ExecuteDataTable("<%= sprocName %>", this._<%= cleanMemberPrivate(SourceTable.PrimaryKey.MemberColumns[0].Name) %>);
						
						// fill collection list
						childDataCollection = <%= string.Format("{0}.GetCollection(dt);", collectionClassName) %>
					}
					catch (Exception ex)
					{
						HandleException(ex);
					}
				}
				
				return childDataCollection;
			}		
			
		<%	
		}
		%>		
		#endregion
		
		<%
		}
		%>
	}
}

<script runat="template">
public string GetMembString(string memType,string memPropName)
{
	
	if (memType == "string")
	{
		return memPropName;
	} else 
	{ 
		return memPropName + ".ToString()";			
	}
	
	
}

public string GetPrimCompString(string ClassName)
{
	string primarycompstr=string.Empty ;
	for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++)
	{
	ColumnSchema column = SourceTable.PrimaryKey.MemberColumns[i];
	string memPropName = cleanMemberProperty(column.Name);
	string firstcolumncomp=string.Empty ;
	string currentcolumncomp="this." + column.Name + "==" +ClassName  + "obj." + memPropName;
	primarycompstr=(i==0)?(currentcolumncomp):("(" + primarycompstr + ")&& (" +  currentcolumncomp +")");
	}
	return primarycompstr;
}
public Dictionary<ColumnSchema,string > GetPrimaryKeyProperties()
{
	Dictionary<ColumnSchema,string> primColDictionary=new Dictionary<ColumnSchema,string>();
	for(int i=0;i<SourceTable.PrimaryKey.MemberColumns.Count;i++)
	{
		primColDictionary.Add(SourceTable.PrimaryKey.MemberColumns[i],cleanMemberProperty(SourceTable.PrimaryKey.MemberColumns[i].Name));
	}
	return primColDictionary;
	}
public void WriteSqlParameters (ColumnSchema column, string sqlParamName, int paramCount)
	{
		//string paramType = GetAppropriateParameter (column, false);
		string columnName = cleanMemberPrivate(column.Name);
		string startParam = string.Format("commandWrapper.Parameters.Add(new SqlParameter(\"@{0}\",", columnName);
		//string startParam = string.Format("commandWrapper.Parameters.Add(new SqlParameter(\"@{0}\", this._{0}));", columnName);
		//Response.WriteLine(startParam);
	
		if (!column.AllowDBNull)
		{
			switch (column.DataType)
			{
				case DbType.AnsiString:
				case DbType.AnsiStringFixedLength:
				case DbType.String:
				case DbType.StringFixedLength:
					Response.WriteLine(string.Format("{0} this._{1}.Trim()));", startParam, columnName));
				break;
				default:
					Response.WriteLine(string.Format("{0} this._{1}));", startParam, columnName));
				break;
			}
		}
		else
		{
			switch (column.DataType)
			{
				case DbType.Int16:
				case DbType.Int32:
				case DbType.Int64:
				{
					Response.WriteLine("");
					Response.WriteLine (string.Format("if (this._{0} == -1)", columnName));
					Response.WriteLine(string.Format("{0} DBNull.Value));", startParam));
					Response.WriteLine ("else");
					Response.WriteLine(string.Format("{0} this._{1}));", startParam, columnName));
					break;
				}
				case DbType.DateTime:
				{
					Response.WriteLine("");
					Response.WriteLine (string.Format("if (this._{0} == DateTime.MinValue)", columnName));
					Response.WriteLine(string.Format("{0} DBNull.Value));", startParam));
					Response.WriteLine ("else");
					Response.WriteLine(string.Format("{0} this._{1}));", startParam, columnName));
					break;
				}
				default:
				{
					Response.WriteLine(string.Format("{0} this._{1}));", startParam, columnName));
					break;
				}
			}
		}
	}

	public string GetAppropriateParameter(ColumnSchema column, bool setDefault, bool isPrefix)
	{
		string returnValue = string.Empty;

		switch (column.DataType)
		{
			case DbType.AnsiString:
			case DbType.AnsiStringFixedLength:
			case DbType.String:
			case DbType.StringFixedLength:
			{
				returnValue = isPrefix ? "string" : " = string.Empty";
				break;
			}
			case DbType.Int16:
			{
				returnValue = isPrefix ? "short" : " = -1";
				break;
			}
			case DbType.Int32:
			{
				returnValue = isPrefix ? "int" : " = -1";
				break;
			}
			case DbType.Int64:
			{
				returnValue = isPrefix ? "long" : " = -1";
				break;
			}
			case DbType.Boolean:
			{
				returnValue = isPrefix ? "bool" : " = false";
				break;
			}
			case DbType.DateTime:
			{
				returnValue = isPrefix ? "DateTime" : " = DateTime.MinValue";
				break;
			}
			case DbType.Guid:
			{
				returnValue = isPrefix ? "Guid" : " = Guid.Empty";
				break;
			}
			default:
			{
				returnValue = isPrefix ? "object" : " = null";
				break;
			}
		}

		return returnValue;
	}

	public string cleanMemberPrivate(string fieldName)
	{
		string newField = fieldName.Substring(0, 1).ToLower() + fieldName.Substring(1, fieldName.Length - 1);
		return newField.Replace("_", string.Empty);
	}

	public string cleanMemberProperty(string fieldName)
	{
		string newField = fieldName.Substring(0, 1).ToUpper() + fieldName.Substring(1, fieldName.Length - 1);
		return newField.Replace("_", string.Empty);
	}
	
	public string ReplacePrefixes (string tableName)
	{
		return tableName.Replace("lk_", string.Empty).Replace("tbl_", string.Empty).Replace("xref_", string.Empty);
	}
	
	public string MakeSingle(string tableName)
	{
		string singleName = tableName;
		if (tableName.EndsWith("s"))
                singleName = tableName.Remove(tableName.Length - 1, 1);

		return singleName;
	}
</script>